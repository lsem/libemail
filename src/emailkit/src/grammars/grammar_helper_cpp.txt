#include <cassert>
#include <cstdint>
#include <cstdlib>
#include <iostream>

bool is_ctl(char c) { return (c >= 0 && c <= 0x1F) || c == 0x7F; }

bool is_list_wildcard(char c) { return c == '%' || c == '*'; }

bool is_DQUOTE(char c) { return c == 0x22; }

bool is_quoted_specials(char c) { return is_DQUOTE(c) || c == '\\'; }

bool is_resp_special(char c) { return c == ']'; }


bool is_atom_special(char c) {
  switch (c) {
  case '(':
  case ')':
  case '{':
  case 20: // SP
    return true;
  }

  if (is_ctl(c)) {
    return true;
  }

  if (is_list_wildcard(c)) {
    return true;
  }

  if (is_quoted_specials(c)) {
    return true;
  }

  if (is_resp_special(c)) {
    return true;
  }

  return false;
}

bool is_char(char c) { return c >= 0x01 && c <= 0x7F; }

// ATOM-CHAR       = <any CHAR except atom-specials>
bool is_atom_char(char c) {
	return is_char(c) && !is_atom_special(c);
}

// ASTRING-CHAR   = ATOM-CHAR / resp-specials
bool is_astring_char(char c) {
	return is_atom_char(c) || is_resp_special(c);
}


void task1() {
  for (uint8_t c = 0; c < 0xff; ++c) {
    if (is_char(c) && !is_atom_special(c)) {
      std::cout << "%x" << std::hex << (uint)c << " ";
    }
  }
}

// QUOTED-CHAR     = <any TEXT-CHAR except quoted-specials> /
//                   "\" quoted-specials

// TEXT-CHAR = <any CHAR except CR and LF>
bool is_text_char(char c) { return is_char(c) && c != '\r' && c != '\n'; }

bool is_any_text_char_except_quoted_specials(char c) {
	return is_text_char(c) && !is_quoted_specials(c);
}

void task2() {
  for (uint8_t c = 0; c < 0xff; ++c) {
    if (is_any_text_char_except_quoted_specials(c)) {
      std::cout << "%x" << std::hex << (uint)c << " / ";
    }
  }
}

bool is_any_text_char_except_xxx(char c) {
	return is_text_char(c) && c != ']';
}
void task3() {
  for (uint8_t c = 0; c < 0xff; ++c) {
    if (is_any_text_char_except_xxx(c)) {
      std::cout << "%x" << std::hex << (uint)c << " / ";
    }
  }
}

bool is_any_astring_char_except_plus(char c) {
	return is_astring_char(c) && c != '+';
}
void task4() {
  for (uint8_t c = 0; c < 0xff; ++c) {
    if (is_any_astring_char_except_plus(c)) {
      std::cout << "%x" << std::hex << (uint)c << " / ";
    }
  }
}

void task5() {
  for (uint8_t c = 0; c < 0xff; ++c) {
    if (is_text_char(c)) {
      std::cout << "%x" << std::hex << (uint)c << " / ";
    }
  }
}




int main() {
	task5();
}
