#include <emailkit/utils.hpp>

#include <gmock/gmock.h>
#include <gtest/gtest.h>

#include <fmt/format.h>

namespace {
const unsigned char rnd_1k_bytes[] = {
    0xba, 0xda, 0xce, 0x6a, 0x5d, 0xf3, 0x6a, 0x86, 0x4e, 0xa1, 0xb1, 0x50, 0xba, 0x47, 0x28, 0x0a,
    0xd3, 0x13, 0xbd, 0x91, 0xc7, 0x3e, 0xa8, 0xe4, 0xdb, 0x14, 0x84, 0x35, 0x9e, 0xce, 0x56, 0x1f,
    0xc9, 0x7f, 0x3b, 0x9a, 0x94, 0x4b, 0xc5, 0x49, 0x1d, 0xdc, 0x54, 0x5e, 0x0f, 0xeb, 0xaa, 0xc2,
    0xc4, 0x7c, 0xf3, 0x5d, 0x4b, 0x81, 0xf9, 0xda, 0xd4, 0x89, 0x63, 0xfc, 0x78, 0xa2, 0xba, 0xf2,
    0x00, 0x02, 0x50, 0xed, 0x0a, 0x78, 0x5c, 0x82, 0x89, 0x60, 0x69, 0x6c, 0x66, 0x11, 0x55, 0xff,
    0x71, 0xc1, 0xfe, 0x7d, 0xbf, 0x88, 0x63, 0x09, 0x7a, 0x1a, 0xa8, 0x9b, 0x5e, 0xab, 0xed, 0xde,
    0x38, 0xcc, 0x9c, 0x24, 0x27, 0x0c, 0x41, 0xb6, 0x7d, 0xaa, 0xdc, 0x3e, 0x0e, 0x66, 0x53, 0x23,
    0x8e, 0xf9, 0x7a, 0xc9, 0x39, 0xc4, 0x83, 0xa0, 0x93, 0x2a, 0x42, 0xce, 0x44, 0x15, 0xd7, 0xc7,
    0xce, 0xa7, 0x08, 0x92, 0xcd, 0x2a, 0xf1, 0xd4, 0x9e, 0x7e, 0x3c, 0x31, 0xd6, 0x25, 0x6f, 0x7b,
    0x31, 0xe6, 0xab, 0x50, 0xe4, 0x5f, 0x25, 0x5a, 0x68, 0xae, 0x54, 0xdf, 0x64, 0x49, 0x70, 0x58,
    0x05, 0xbb, 0xa8, 0x73, 0x8b, 0xb0, 0x1d, 0xfa, 0x58, 0x10, 0x62, 0x86, 0x81, 0xc8, 0x12, 0xd4,
    0x42, 0xf6, 0xb6, 0xd2, 0x41, 0x34, 0x9d, 0x9b, 0x52, 0xa5, 0x49, 0x2d, 0xd0, 0x49, 0x43, 0x74,
    0x62, 0x75, 0x05, 0x14, 0xe6, 0xa7, 0x69, 0x2f, 0x26, 0x56, 0x7b, 0xe2, 0xd7, 0xf2, 0xb6, 0x4c,
    0x88, 0x8c, 0xf2, 0x93, 0x50, 0xb6, 0xe3, 0xd6, 0x00, 0x7c, 0x06, 0x07, 0x94, 0xeb, 0x70, 0x23,
    0x56, 0x38, 0x29, 0x8f, 0x3b, 0xde, 0x88, 0x82, 0xdc, 0x61, 0x6e, 0xde, 0x33, 0x64, 0x34, 0x67,
    0xa6, 0x34, 0xaf, 0xaf, 0x89, 0x1f, 0xa1, 0x5f, 0x5b, 0xfd, 0x73, 0x71, 0xa6, 0x17, 0xaa, 0xff,
    0xa6, 0xb0, 0x0f, 0x82, 0x01, 0x1e, 0x00, 0x3a, 0x26, 0x3c, 0x65, 0xd9, 0x5b, 0x66, 0x0d, 0xa6,
    0x1c, 0xf2, 0xd9, 0x1f, 0x72, 0x76, 0xba, 0xd1, 0x42, 0x07, 0xe8, 0x7c, 0x01, 0xa5, 0xe1, 0xdd,
    0x46, 0x0f, 0xcf, 0xb8, 0xc4, 0x83, 0x75, 0xd5, 0x76, 0xd8, 0x32, 0x84, 0xc2, 0xc6, 0xc9, 0xe0,
    0xec, 0x8b, 0x28, 0x2b, 0x8a, 0xf8, 0x5f, 0x71, 0x55, 0xc7, 0x7a, 0x1d, 0x87, 0xc1, 0xff, 0x64,
    0x6b, 0xd7, 0x06, 0xf9, 0x3e, 0x62, 0x48, 0x11, 0xf7, 0x1b, 0xa0, 0xc3, 0xd3, 0xee, 0xe6, 0x98,
    0xa2, 0x90, 0xdd, 0x69, 0x0b, 0xbf, 0x9a, 0x04, 0x5e, 0x5f, 0x93, 0x9c, 0xed, 0x32, 0xca, 0x90,
    0x76, 0xe3, 0xd6, 0x84, 0x86, 0x79, 0x18, 0xff, 0x1c, 0xd6, 0xe6, 0x77, 0x90, 0xdb, 0x43, 0x24,
    0xfc, 0xad, 0x2e, 0xa4, 0xec, 0x6f, 0x82, 0x09, 0xff, 0x80, 0x27, 0x7a, 0x49, 0x81, 0x66, 0x2e,
    0xce, 0x3e, 0x55, 0x9f, 0x4b, 0xdc, 0x65, 0x6b, 0x4f, 0x39, 0x46, 0x4c, 0x9f, 0x20, 0x73, 0x75,
    0x50, 0x3b, 0x52, 0x91, 0xdf, 0x79, 0x48, 0x70, 0xc3, 0x8b, 0x9a, 0xfe, 0xef, 0xdf, 0xb9, 0x62,
    0xa4, 0x4f, 0xa8, 0x46, 0xe3, 0x46, 0x0c, 0xfb, 0x58, 0xfd, 0xf2, 0x29, 0x0d, 0x69, 0xa2, 0xe7,
    0x73, 0x70, 0x04, 0xd5, 0x77, 0x18, 0x77, 0xe1, 0x11, 0xfd, 0x8b, 0x54, 0x56, 0x28, 0x56, 0x8c,
    0x79, 0xa3, 0xd7, 0x1e, 0x95, 0xc5, 0x43, 0xb6, 0x05, 0x04, 0x10, 0x43, 0x1f, 0x8f, 0x36, 0x8a,
    0xab, 0x6d, 0xd6, 0xd4, 0x7e, 0xcf, 0xf9, 0x60, 0xb6, 0xde, 0x55, 0xc0, 0x34, 0xcf, 0x39, 0x85,
    0xeb, 0xdd, 0x54, 0xdc, 0xa1, 0x1e, 0x9e, 0xc7, 0x8f, 0x76, 0xbb, 0xf6, 0x38, 0x89, 0x15, 0x05,
    0x67, 0xb6, 0x0d, 0xc9, 0x46, 0x2d, 0xd2, 0x65, 0x9f, 0xff, 0x5d, 0xb4, 0x89, 0xe3, 0xb4, 0xc7,
    0x1b, 0x45, 0x25, 0x6b, 0x20, 0x32, 0x2a, 0xbb, 0x3d, 0x36, 0x9f, 0x61, 0x88, 0xba, 0x69, 0x1c,
    0xe2, 0xfe, 0x21, 0x05, 0x73, 0x7e, 0xb7, 0x87, 0x00, 0x16, 0xce, 0x6b, 0x26, 0xe6, 0xfe, 0x22,
    0x55, 0x75, 0x9d, 0xfe, 0x1c, 0x75, 0xb7, 0x7f, 0x93, 0x84, 0x33, 0xf4, 0xeb, 0xf5, 0x6f, 0x11,
    0xcd, 0x4d, 0x09, 0xd4, 0x9f, 0xf0, 0xb0, 0x17, 0x83, 0x71, 0x2b, 0xb0, 0xeb, 0x51, 0xd3, 0x22,
    0x9c, 0x05, 0xb2, 0x11, 0x11, 0x3f, 0x39, 0xa0, 0x35, 0x14, 0xc4, 0xf1, 0x73, 0x61, 0xfa, 0xf5,
    0xd0, 0x10, 0x27, 0x80, 0x4f, 0x75, 0x92, 0x25, 0x05, 0x12, 0x5a, 0x24, 0x70, 0x02, 0x3f, 0x37,
    0xd5, 0xb0, 0x3c, 0xe2, 0x60, 0xc1, 0x56, 0x36, 0x28, 0x3d, 0x70, 0xd9, 0x51, 0xa0, 0x00, 0x39,
    0xd8, 0xbb, 0xa1, 0xf3, 0xaf, 0x1b, 0x51, 0x1e, 0x8d, 0x56, 0x0a, 0xa7, 0xc2, 0x41, 0x15, 0x61,
    0x58, 0xd4, 0x5e, 0x0e, 0x96, 0xd2, 0x94, 0x82, 0x8a, 0xf4, 0x4b, 0x91, 0xcf, 0x39, 0x27, 0x99,
    0xdc, 0xef, 0x20, 0xb8, 0x95, 0xd9, 0x2b, 0x79, 0x0c, 0xfc, 0x33, 0xce, 0x30, 0xcb, 0xac, 0x93,
    0xbd, 0x40, 0xc2, 0xb4, 0x60, 0x65, 0x5a, 0x1b, 0x2a, 0xcb, 0x59, 0x52, 0xc3, 0xf4, 0x8c, 0xa8,
    0x9c, 0x74, 0x64, 0x1d, 0xee, 0xfe, 0x57, 0xbd, 0xf1, 0xa8, 0x6b, 0x7f, 0x3c, 0x49, 0x25, 0x0c,
    0xae, 0x5e, 0xbf, 0x5d, 0xf3, 0xb8, 0x4e, 0x3d, 0x8b, 0xa4, 0x72, 0xa6, 0xfa, 0xbb, 0x99, 0x3b,
    0x9a, 0x2b, 0x79, 0xcd, 0xfc, 0x62, 0xa3, 0x83, 0x2c, 0x9a, 0x39, 0x0c, 0x58, 0x16, 0x4e, 0xbc,
    0x94, 0xc1, 0x9c, 0x11, 0xa5, 0xfb, 0x9a, 0x3b, 0xa4, 0x2d, 0xd3, 0x81, 0x3c, 0xcf, 0x40, 0x87,
    0xa0, 0x72, 0x79, 0x11, 0x0b, 0x50, 0x07, 0x35, 0x01, 0xfb, 0x2b, 0xdf, 0x06, 0x1f, 0x4c, 0x3a,
    0x42, 0x06, 0x15, 0xd4, 0x97, 0xe6, 0xed, 0x3c, 0x35, 0x74, 0xc1, 0x8f, 0x84, 0xe9, 0x68, 0x1e,
    0x5f, 0x00, 0xf2, 0xa1, 0x3a, 0x9f, 0xa2, 0x7d, 0x30, 0xd0, 0xf8, 0x5b, 0x48, 0x8f, 0xe1, 0x7a,
    0x01, 0xcf, 0xff, 0x9c, 0x27, 0xb9, 0xfd, 0xed, 0x0d, 0xe1, 0xd0, 0x9f, 0x3e, 0x8d, 0xc3, 0x4e,
    0x49, 0x98, 0x7e, 0x54, 0xe0, 0x52, 0xab, 0x47, 0x75, 0x2f, 0x9c, 0x78, 0xc6, 0x8a, 0x7d, 0xe2,
    0x96, 0x63, 0xa1, 0x94, 0x83, 0x67, 0x3c, 0x0f, 0x57, 0xad, 0x27, 0x3a, 0x2d, 0xbd, 0xa9, 0x78,
    0x2c, 0xf4, 0x63, 0x23, 0x97, 0xdc, 0xe3, 0xc0, 0x9a, 0xe7, 0xf1, 0xa1, 0xb8, 0x2d, 0x16, 0x4e,
    0xe2, 0x49, 0x02, 0xd1, 0x1d, 0xf5, 0xb5, 0xe9, 0x57, 0x4d, 0xde, 0x89, 0x6e, 0x56, 0xda, 0x21,
    0xdc, 0xfc, 0xb2, 0x4b, 0x56, 0x6a, 0xbd, 0x05, 0xf1, 0x85, 0x03, 0x5a, 0xf1, 0xf5, 0x70, 0xea,
    0xbe, 0x27, 0xb5, 0x3d, 0x0d, 0x13, 0xe5, 0x2b, 0xb6, 0x81, 0x88, 0xda, 0x43, 0x3d, 0xbc, 0xc1,
    0x32, 0x27, 0x28, 0xa1, 0x83, 0x1a, 0xb5, 0xbd, 0xec, 0xf3, 0xc4, 0xd9, 0xa2, 0xc6, 0xb4, 0x73,
    0x4e, 0x49, 0x96, 0xd7, 0xc7, 0xad, 0xe3, 0xaf, 0xa1, 0x99, 0x94, 0x12, 0x2a, 0x53, 0x63, 0xc1,
    0x87, 0x51, 0x8f, 0xfc, 0xd3, 0xd0, 0x39, 0x18, 0x83, 0xed, 0xae, 0xfe, 0xb5, 0x95, 0x39, 0xcc,
    0xef, 0x9c, 0x38, 0xb3, 0xf8, 0x69, 0xa1, 0x5c, 0x02, 0xdb, 0x2f, 0xa4, 0x3a, 0xbc, 0x64, 0xa9,
    0xee, 0x53, 0x95, 0x1e, 0x72, 0xf4, 0x4d, 0x29, 0x37, 0xbb, 0xc2, 0x22, 0x8e, 0x8d, 0xeb, 0xb4,
    0x2a, 0xf1, 0xb4, 0xd7, 0x3f, 0x39, 0x58, 0x79};

unsigned int rnd_1k_bytes_len = 1000;
const std::string random_bytes{rnd_1k_bytes, rnd_1k_bytes + rnd_1k_bytes_len};

TEST(utils_test, base64_encode_basic_test) {
    EXPECT_EQ(emailkit::utils::base64_naive_encode("test"), "dGVzdA==");

    // Encoded with external tool online.
    EXPECT_EQ(
        emailkit::utils::base64_naive_encode(random_bytes),
        "utrOal3zaoZOobFQukcoCtMTvZHHPqjk2xSENZ7OVh/"
        "JfzualEvFSR3cVF4P66rCxHzzXUuB+drUiWP8eKK68gACUO0KeFyCiWBpbGYRVf9xwf59v4hjCXoaqJteq+"
        "3eOMycJCcMQbZ9qtw+DmZTI475esk5xIOgkypCzkQV18fOpwiSzSrx1J5+"
        "PDHWJW97MearUORfJVporlTfZElwWAW7qHOLsB36WBBihoHIEtRC9rbSQTSdm1KlSS3QSUN0YnUFFOanaS8mVnvi1/"
        "K2TIiM8pNQtuPWAHwGB5TrcCNWOCmPO96Igtxhbt4zZDRnpjSvr4kfoV9b/XNxpheq/"
        "6awD4IBHgA6Jjxl2VtmDaYc8tkfcna60UIH6HwBpeHdRg/PuMSDddV22DKEwsbJ4OyLKCuK+F9xVcd6HYfB/"
        "2Rr1wb5PmJIEfcboMPT7uaYopDdaQu/mgReX5Oc7TLKkHbj1oSGeRj/"
        "HNbmd5DbQyT8rS6k7G+CCf+AJ3pJgWYuzj5Vn0vcZWtPOUZMnyBzdVA7UpHfeUhww4ua/u/"
        "fuWKkT6hG40YM+1j98ikNaaLnc3AE1XcYd+ER/YtUVihWjHmj1x6VxUO2BQQQQx+PNoqrbdbUfs/"
        "5YLbeVcA0zzmF691U3KEensePdrv2OIkVBWe2DclGLdJln/"
        "9dtInjtMcbRSVrIDIquz02n2GIumkc4v4hBXN+t4cAFs5rJub+IlV1nf4cdbd/k4Qz9Ov1bxHNTQnUn/"
        "CwF4NxK7DrUdMinAWyERE/"
        "OaA1FMTxc2H69dAQJ4BPdZIlBRJaJHACPzfVsDziYMFWNig9cNlRoAA52Luh868bUR6NVgqnwkEVYVjUXg6W0pSCiv"
        "RLkc85J5nc7yC4ldkreQz8M84wy6yTvUDCtGBlWhsqy1lSw/SMqJx0ZB3u/"
        "le98ahrfzxJJQyuXr9d87hOPYukcqb6u5k7mit5zfxio4MsmjkMWBZOvJTBnBGl+"
        "5o7pC3TgTzPQIegcnkRC1AHNQH7K98GH0w6QgYV1Jfm7Tw1dMGPhOloHl8A8qE6n6J9MND4W0iP4XoBz/"
        "+cJ7n97Q3h0J8+jcNOSZh+"
        "VOBSq0d1L5x4xop94pZjoZSDZzwPV60nOi29qXgs9GMjl9zjwJrn8aG4LRZO4kkC0R31telXTd6JblbaIdz8sktWar"
        "0F8YUDWvH1cOq+J7U9DRPlK7aBiNpDPbzBMicooYMatb3s88TZosa0c05JltfHreOvoZmUEipTY8GHUY/"
        "809A5GIPtrv61lTnM75w4s/hpoVwC2y+kOrxkqe5TlR5y9E0pN7vCIo6N67Qq8bTXPzlYeQ==");
}

TEST(utils_test, base64_encode_decode_roundtrip_test) {
    std::vector<std::string> samples;
    samples.emplace_back("example test with control chars just in case \001");
    samples.emplace_back("");
    samples.emplace_back("\x1");
    samples.emplace_back("\x1\x1");
    samples.emplace_back(random_bytes);

    for (auto& s : samples) {
        auto encoded = emailkit::utils::base64_naive_encode(s);
        auto decoded = emailkit::utils::base64_naive_decode(encoded);
        EXPECT_EQ(s, decoded) << fmt::format("encoded: '{}', decoded: '{}', sample: '{}'", encoded,
                                             emailkit::utils::escape_ctrl(decoded),
                                             emailkit::utils::escape_ctrl(s));
    }
}

TEST(utils_test, split_view_test) {
    {
        const std::string sample = "T0 OK [AUTHENTICATED]\r\n";
        auto tokens = emailkit::utils::split_views(sample, ' ');
        EXPECT_THAT(tokens, testing::ElementsAre("T0", "OK", "[AUTHENTICATED]\r\n"));
    }
    {
        std::string sample = "T0 OK [AUTHENTICATED]\r\n";
        std::string_view sample_view = sample;
        sample_view.remove_suffix(2);
        auto tokens = emailkit::utils::split_views(sample_view, ' ');
        EXPECT_THAT(tokens, testing::ElementsAre("T0", "OK", "[AUTHENTICATED]"));
    }
    {
        const std::string sample = "just_a_text";
        auto tokens = emailkit::utils::split_views(sample, ' ');
        EXPECT_THAT(tokens, testing::ElementsAre("just_a_text"));
    }
    {
        const std::string sample = "";
        auto tokens = emailkit::utils::split_views(sample, ' ');
        EXPECT_THAT(tokens, testing::ElementsAre());
    }
}

TEST(utils_test, split_test) {
    {
        const std::string sample = "T0 OK [AUTHENTICATED]\r\n";
        auto tokens = emailkit::utils::split(sample, ' ');
        EXPECT_THAT(tokens, testing::ElementsAre("T0", "OK", "[AUTHENTICATED]\r\n"));
    }
    {
        const std::string sample = "just_a_text";
        auto tokens = emailkit::utils::split(sample, ' ');
        EXPECT_THAT(tokens, testing::ElementsAre("just_a_text"));
    }
    {
        const std::string sample = "";
        auto tokens = emailkit::utils::split(sample, ' ');
        EXPECT_THAT(tokens, testing::ElementsAre());
    }
}

}  // namespace
